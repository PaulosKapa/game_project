[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;


uniform vec4 wave1 = vec4(0.5, 0.5, 0.15, 3);

uniform float sizey = 1.0;

vec4 wave(vec4 parameter, vec2 position, float time, inout vec3 tangent, inout vec3 binormal)
{
	float wave_steepness = parameter.z;
	float wave_length = parameter.w;

	float k = 2.0 * 3.14159265359 / wave_length;
	float c = sqrt(9.8 / k);
	vec2 d = normalize(parameter.xy);
	float f = k * (dot(d, position) - c * time);
	float a = wave_steepness / k;
	
	tangent += normalize(vec3(1.0-d.x * d.x * (wave_steepness * sin(f)), d.x * (wave_steepness * cos(f)), -d.x * d.y * (wave_steepness * sin(f))));
	binormal += normalize(vec3(-d.x * d.y * (wave_steepness * sin(f)), d.y * (wave_steepness * cos(f)), 1.0-d.y * d.y * (wave_steepness * sin(f))));
	
	return vec4(d.x * (a * cos(f)), a * sin(f) * 0.25, d.y * (a * cos(f)), 0.0);
}

void vertex()
{
	vec4 vertex = vec4(VERTEX, 1.0);
	vec3 vertexPosition = (WORLD_MATRIX * vertex).xyz;
	
	vec3 vertexTangent = vec3(0.0, 0.0, 0.0);
	vec3 vertexBinormal = vec3(0.0, 0.0, 0.0);
	if (UV.y<sizey){
	vertex += wave(wave1, vertexPosition.xz, TIME, vertexTangent, vertexBinormal);}

	
	TANGENT = vertexTangent;
	BINORMAL = vertexBinormal;
	VERTEX = vertex.xyz;
}

void fragment(){

    if(UV.y<sizey) {
        ALBEDO = vec3(0.35, 0.83, 0.32);
        ALPHA = 0.75;
        EMISSION = vec3(0.35, 0.83, 0.32);
    }
    else{
        ALBEDO = vec3(250, 250, 0);
    }
}

"

[resource]
shader = SubResource( 1 )
shader_param/wave1 = Plane( 0.5, 0, 0.05, 2 )
shader_param/sizey = 1.0
